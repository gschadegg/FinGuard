{
  "name": "@fin-guard/backend",
  "private": true,
  "scripts": {
    "venv:create": "py -3.13 -m venv .venv || py -3 -m venv .venv && .\\.venv\\Scripts\\python.exe -m pip install -U pip wheel setuptools",
    "req:install": ".\\.venv\\Scripts\\python.exe -m pip install -r requirements.txt",
    "req:freeze": ".\\.venv\\Scripts\\pip.exe freeze > requirements.txt",
    "db:up": "docker compose -f ../database/docker-compose.yml up -d",
    "db:down": "docker compose -f ../database/docker-compose.yml down",
    "db:reset": "docker compose -f ../database/docker-compose.yml down -v && docker compose -f ../database/docker-compose.yml up -d",
    "migrate:make": "set ENV=dev&& .\\.venv\\Scripts\\alembic.exe revision --autogenerate -m \"change\"",
    "migrate:up": "set ENV=dev&& .\\.venv\\Scripts\\alembic.exe upgrade head",
    "seed": "set ENV=dev&& .\\.venv\\Scripts\\python.exe -m seed.seed",
    "dev": ".\\.venv\\Scripts\\python.exe -m uvicorn app.main:app --reload --host 127.0.0.1 --port 8000",
    "test": ".\\.venv\\Scripts\\python.exe -m pytest",
    "lint": ".\\.venv\\Scripts\\ruff.exe check .",
    "start:backend": "pnpm run db:up && pnpm run migrate:up && pnpm run dev",
    "postman:login": "pnpm exec dotenv -e .env -- cross-env-shell \"postman login --with-api-key $POSTMAN_KEY\"",
    "postman:run-collection": "pnpm exec dotenv -e .env -- cross-env-shell \"postman collection run postman/collections/FastAPI.postman_collection.json -e $POSTMAN_ENV_ID\"",
    "postman:test": "pnpm run postman-login && pnpm run postman-run-collection",
    "init-setup": "pnpm run venv:create && pnpm run req:install && pnpm run db:up && pnpm run migrate:up && pnpm run seed && pnpm run dev"
  },
  "devDependencies": {
    "cross-env": "^10.0.0",
    "dotenv-cli": "^10.0.0"
  }
}
